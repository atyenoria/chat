'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jsHelpers = require('./jsHelpers');

var _testComponents = require('./testComponents');

var _reactZeroclipboard = require('react-zeroclipboard');

var _reactZeroclipboard2 = _interopRequireDefault(_reactZeroclipboard);

var _reactPureRenderComponent = require('react-pure-render/component');

var _reactPureRenderComponent2 = _interopRequireDefault(_reactPureRenderComponent);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var TestMonitor = (function (_PureComponent) {
  _inherits(TestMonitor, _PureComponent);

  function TestMonitor() {
    _classCallCheck(this, TestMonitor);

    _PureComponent.call(this);
    this.state = {
      describeText: ''
    };
  }

  TestMonitor.prototype.onDescribeNewText = function onDescribeNewText(text) {
    this.setState({ describeText: text });
  };

  TestMonitor.prototype.render = function render() {
    var _props = this.props;
    var stagedActions = _props.stagedActions;
    var computedStates = _props.computedStates;

    var countOfActionsAndStores = _ramda2['default'].range(0, stagedActions.length);

    var items = _ramda2['default'].map(function (index) {
      if (index === 0) {
        return {
          action: {
            type: '@@INIT'
          },
          curState: {},
          nextState: computedStates[0].state,
          index: index
        };
      }

      return {
        index: index,
        action: stagedActions[index],
        curState: computedStates[index - 1].state,
        nextState: computedStates[index].state
      };
    }, countOfActionsAndStores);

    return _react2['default'].createElement(
      'div',
      { style: {
          position: 'relative',
          overflowY: 'hidden',
          width: '100%',
          height: '100%',
          minWidth: 300,
          backgroundColor: '#2A2F3A' } },
      _react2['default'].createElement(
        'div',
        { style: { position: 'absolute',
            left: 0,
            right: 0,
            bottom: 0,
            overflowX: 'hidden',
            overflowY: 'auto' } },
        _react2['default'].createElement(_testComponents.Describe, { onNewText: this.onDescribeNewText.bind(this), items: items }),
        _react2['default'].createElement('br', null),
        _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement(
            'p',
            null,
            'Click the button to copy some text'
          ),
          _react2['default'].createElement(
            _reactZeroclipboard2['default'],
            { text: this.state.describeText },
            _react2['default'].createElement(
              'button',
              { style: { textDecoration: 'underline', cursor: 'hand' } },
              'Copy to Buffer'
            )
          )
        )
      )
    );
  };

  return TestMonitor;
})(_reactPureRenderComponent2['default']);

exports['default'] = TestMonitor;
module.exports = exports['default'];