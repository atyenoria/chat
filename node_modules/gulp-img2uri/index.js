'use strict';
var fs = require('fs'),
    through = require('through2'),
    htmlparser = require('htmlparser'),
    path = require('path'),
    gutil = require('gulp-util'),
    PluginError = gutil.PluginError;

var main = function () {
  var imgList = [],
      newHtml = '';
  function encodeImg(filePath, src) {
    var absoPath = path.normalize(filePath + '/' + src);
    var data = fs.readFileSync(absoPath);
    return data.toString('base64');
  }
  function findImgTag(filePath, domArr) {
    domArr.forEach(function (ele) {
      if (ele.type === 'tag' && ele.name === 'img' && ele.attribs && ele.attribs['gulp-bind'] === 'img2url') {
        var srcPos = ele.attribs.src;
        ele.attribs.src = 'data:image/jpg;base64,' + encodeImg(filePath, srcPos);
        ele.raw = ele.raw.replace('src="' + srcPos + '"', 'src="' + ele.attribs.src + '"').replace('gulp-bind="img2url"','');
        imgList.push(ele);
      }
      if (ele.children) {
        findImgTag(filePath, ele.children);
      }
    });
  }
  function genHtml(arr) {
    if (!arr.length) {
      return;
    }
    arr.forEach(function (ele) {
      if (ele.raw === '\n') {
        return newHtml += '\n';
      }
      if (ele.type === 'text') {
        return newHtml += ele.raw;
      }
      if (!ele.children) {
        return newHtml += ('<' + ele.raw + '>');
      } else {
        newHtml += ('<' + ele.raw + '>');
        genHtml(ele.children);
        newHtml += ('</' + ele.name + '>');
      }
    });
  }
  function callback(file, encoding, cb) {
    if (file.isNull()) {
      throw new PluginError('gulp-img2url', 'Missing file buffer');
      return cb();
    }
    if (file.isStream()) {
      throw new PluginError('gulp-img2url', 'Streaming not supported');
      return cb();
    }
    var rawHtml = String(file.contents);
    var handler = new htmlparser.DefaultHandler(function (error, dom) {
        if (error) {console.log(error);}
    });
    var parser = new htmlparser.Parser(handler);
    parser.parseComplete(rawHtml);
    var bodyDomContent = handler.dom[2].children[3].children;
    if (!bodyDomContent) {
      throw new PluginError('gulp-img2url', 'Not supported html stucture');
      cb();
      return;
    }
    var filePath = file.cwd;
    findImgTag(filePath, bodyDomContent);
    genHtml(handler.dom);
    file.contents = new Buffer(newHtml);
    this.push(file);
    cb();
  }
  return through.obj(callback);
};

module.exports = main;
